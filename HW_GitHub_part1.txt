JSON
 4. Создать внешний репозиторий c названием JSON.

-- открыть https://github.com. Залогиниться. Нажать кнопку New.
-- в поле Repository name ввести JSON, выбрать Public и Add a README file.
-- Нажать Create repository.

 5. Клонировать репозиторий JSON на локальный компьютер.

-- Нажать Code, выбрать HTTPS, скопировать ссылку на репозиторий,
в gitbash зайти в папку(в которой будет размещен репозиторий),

 === git clone https://github.com/GarretQA/JSON.git

-- в терминале перейти в папку JSON(cd JSON),
в конце адреса расположения отображается main

 6. Внутри локального JSON создать файл “new.json”.

 === touch new.json
 === git status - new.json
     отображается красным (изменения в файле не отслеживаются)

 7. Добавить файл под гит. 

=== git add new.json
=== git status - new.json отображается зеленым
    (изменения в файле отслеживаются)

 8. Закоммитить файл. 

=== git commit -m "new JSON file added"

 9. Отправить файл на внешний GitHub репозиторий. 

=== git push

 10. Отредактировать содержание файла “new.json” - написать информацию о себе
     (ФИО, возраст, количество домашних животных, будущая желаемая зарплата).
     Всё написать в формате JSON. 

	=== cat >> new.json

   {
   "name":"Andrey",
   "surname":"Komarnitskiy",
   "age":35,
   "pets":0,
   "expected_salary_usd":600
    }

 11. Отправить изменения на внешний репозиторий.

 === git commit -am "first changes to new.json"
     git push

 12. Создать файл preferences.json 

=== touch preferences.json

 13. В файл preferences.json добавить информацию о своих предпочтениях
     (Любимый фильм, любимый сериал, любимая еда, любимое время года,
     сторона которую хотели бы посетить) в формате JSON.

     === cat >> preferences.json

{
   "film":"Interstellar",
   "TVShow":"Lexx",
   "food":"steak",
   "season":"spring",
   "countryIWouldLikeToVisit":"Iceland"
}

 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены
     на курсе в формате JSON 

=== cat > skills.json

     {
   "hard_skills":[
      "QA_basics",
      "HTTP_methods",
      "Bash",
      "Git",
      "Postman",
      "DevTools",
      "SQL"
   ],
   "soft_skills":[
      "time_management",
      "adaptivity",
      "collaboration",
      "stress_management",
      "mentoring"
   ]
}
 15. Отправить сразу 2 файла на внешний репозиторий. 

=== git add . ; git commit -m "two JSON files sent" ; git push

 16. На веб интерфейсе создать файл bug_report.json.

=== Войти в репозиторий JSON. Нажать кнопку Add file.
=== Выбрать Create new file. В поле Name your file ввести bug_report.json.

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 === Нажать кнопку Commit new file.

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт
     в формате JSON.

=== Открыть файл bug_report.json Выбрать редактирование. Ввести текст

{
   "bug_id":1,
   "project":"application_1",
   "title":"invoice cannot be printed by the user",
   "summary":"invoice cannot be printed by the user in application_1 when the user presses 'Print' button on main panel",
   "environment":{
      "device":"MyPC",
      "OS":"Windows_10",
      "version":"12SRE12"
   },
   "steps_to_reproduce":{
      "1":"open 'application_1'",
      "2":"press 'create_invoice' button",
      "3":"press 'print_invoice' button"
   },
   "attachment":"video",
   "actual_result":"nothing happens when button is pressed",
   "expected_result":"invoice_printed",
   "priority":"critical",
   "assignee":"Andrey",
   "reporter":"Andrey"
}

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 === Нажать кнопку Commit changes.

 20. Синхронизировать внешний и локальный репозиторий JSON 

=== git pull


XML
 21. Создать внешний репозиторий c названием XML.

-- открыть https://github.com. Залогиниться. Нажать кнопку New.
-- в поле Repository name ввести XML, выбрать Public и Add a README file.
-- Нажать Create repository.

 22. Клонировать репозиторий XML на локальный компьютер. 

--- Нажать Code, выбрать HTTPS, скопировать ссылку на репозиторий,
    в gitbash зайти в папку(в которой будет размещен репозиторий),

=== git clone https://github.com/GarretQA/XML.git

--- в терминале перейти в папку XML(cd XML),
    в конце адреса расположения отображается main

 23. Внутри локального XML создать файл “new.xml”.

=== > new.xml
=== git status - new.xml отображается красным
    (изменения в файле не отслеживаются)

 24. Добавить файл под гит. 

=== git add new.xml
=== git status - new.xml отображается зеленым
    (изменения в файле отслеживаются)

 25. Закоммитить файл.

 === git commit -m "new XML added"

 26. Отправить файл на внешний GitHub репозиторий. 

=== git push

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе
     (ФИО, возраст, количество домашних животных, будущая желаемая зарплата).
     Всё написать в формате XML. 

=== cat >> new.xml

<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <name>Andrey</name>
  <surname>Komarnitskiy</surname>
  <age>35</age>
  <pets>0</pets>
  <expected_salary_usd>600</expected_salary_usd>
</root>

 28. Отправить изменения на внешний репозиторий. 

=== git commit -am "update new.xml"
    git push

 29. Создать файл preferences.xml 

=== touch preferences.xml

 30. В файл preferences.xml добавить информацию о своих предпочтениях
     (Любимый фильм, любимый сериал, любимая еда, любимое время года,
     сторона которую хотели бы посетить) в формате XML. 

=== cat > preferences.xml

<?xml version="1.0" encoding="UTF-8" ?>
<root>
  <film>Interstellar</film>
  <TVShow>Lexx</TVShow>
  <food>steak</food>
  <season>spring</season>
  <countryIwouldliketovisit>Iceland</countryIwouldliketovisit>
</root>

 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены
     на курсе в формате XML 

=== cat > skills.xml

<?xml version="1.0" encoding="UTF-8"?>
<root>
  <hard_skills>QA_basics</hard_skills>
  <hard_skills>HTTP_methods</hard_skills>
  <hard_skills>Bash</hard_skills>
  <hard_skills>Git</hard_skills>
  <hard_skills>Postman</hard_skills>
  <hard_skills>DevTools</hard_skills>
  <hard_skills>SQL</hard_skills>
  <soft_skills>time_management</soft_skills>
  <soft_skills>adaptivity</soft_skills>
  <soft_skills>collaboration</soft_skills>
  <soft_skills>stress_management</soft_skills>
  <soft_skills>mentoring</soft_skills>
</root>

 32. Сделать коммит в одну строку. 

=== git add . && git commit -m "two XMLs added"

 33. Отправить сразу 2 файла на внешний репозиторий. 

=== git push

 34. На веб интерфейсе создать файл bug_report.xml.

--- Войти в репозиторий XML. Нажать кнопку Add file.
--- Выбрать Create new file. В поле Name your file ввести bug_report.xml.

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 --- Нажать кнопку Commit new file.

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг
     репорт в формате XML.

--- Открыть файл bug_report.json Выбрать редактирование. Ввести текст

<?xml version="1.0" encoding="UTF-8"?>
<bugReport>
  <bug_id number="true">1</bug_id>
  <project>application_1</project>
  <title>invoice cannot be printed by the user</title>
  <summary>invoice cannot be printed by the user in application_1 when the user presses 'Print' button on main panel</summary>
  <environment>
    <device>MyPC</device>
    <OS>Windows_10</OS>
    <version>12SRE12</version>
  </environment>
  <steps_to_reproduce>
    <step1>open 'application_1'</step1>
    <step2>press 'create_invoice' button</step2>
    <step3>press 'print_invoice' button</step3>
  </steps_to_reproduce>
  <attachment>video</attachment>
  <actual_result>nothing happens when button is pressed</actual_result>
  <expected_result>invoice_printed</expected_result>
  <priority>critical</priority>
  <assignee>Andrey</assignee>
  <reporter>Andrey</reporter>
</bugReport>

 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

 --- Нажать кнопку Commit changes.

 38. Синхронизировать внешний и локальный репозиторий XML 

=== git pull


 TXT
 1. Создать внешний репозиторий c названием TXT.

--- открыть https://github.com. Залогиниться. Нажать кнопку New.
--- в поле Repository name ввести TXT, выбрать Public и Add a README file.
--- Нажать Create repository.

 2. Клонировать репозиторий TXT на локальный компьютер.

--- Нажать Code, выбрать HTTPS, скопировать ссылку на репозиторий,
    в gitbash зайти в папку(в которой будет размещен репозиторий),

=== git clone https://github.com/GarretQA/TXT.git

--- в терминале перейти в папку TXT(cd TXT),
    в конце адреса расположения отображается main

 3. Внутри локального TXT создать файл “new.txt”. 

=== touch new.txt
=== git status - new.txt отображается красным
    (изменения в файле не отслеживаются)

 4. Добавить файл под гит. 

=== git add new.txt
=== git status - new.txt отображается зеленым
    (изменения в файле отслеживаются)

 5. Закоммитить файл. 

=== git commit -m "not first txt"

 6. Отправить файл на внешний GitHub репозиторий. 

=== git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе
    (ФИО, возраст, количество домашних животных, будущая желаемая зарплата).
    Всё написать в формате TXT. 

=== cat > new.txt

name: Andrey
surname: Komarnitskiy
age: 35
pets: 0
expected_salary_usd: 600

 8. Отправить изменения на внешний репозиторий. 

=== git commit -am "changes to txt file"
    git push

 9. Создать файл preferences.txt 

=== touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях
     (Любимый фильм, любимый сериал, любимая еда, любимое время года,
     сторона которую хотели бы посетить) в формате TXT. 

=== cat > preferences.txt

film: Interstellar
TVShow: Lexx
food: steak
season: spring
countryIWouldLikeToVisit: Iceland

 11. Создать файл skills.txt добавить информацию о скиллах которые будут изучены
     на курсе в формате TXT 

=== cat > skills.txt

hard_skills:
	QA_basics
	HTTP_methods
	Bash
	Git
	Postman
	DevTools
	QL
soft_skills:
	time_management
	adaptivity
	collaboration
	stress_management
	mentoring


 12. Сделать коммит в одну строку. 

=== git add . && git commit -m "two TXT files sent"

 13. Отправить сразу 2 файла на внешний репозиторий. 

=== git push

 14. На веб интерфейсе создать файл bug_report.txt.

--- Войти в репозиторий TXT. Нажать кнопку Add file.
--- Выбрать Create new file. В поле Name your file ввести bug_report.txt.

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

--- Нажать кнопку Commit new file.

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг
     репорт в формате TXT.

--- Открыть файл bug_report.txt Выбрать редактирование. Ввести текст

1) Bug_id: 1
2) Project: application_1
3) Title: invoice cannot be printed by the user
4) Summary: invoice cannot be printed by the user in application_1 when the user presses 'Print' button on main panel
5) Environment:
5.1) Device: MyPC
5.2) OS: Windows_10
5.3) Version: 12SRE12
6) Steps_to_reproduce:
6.1) Open 'application_1'
6.2) Press 'create_invoice' button
6.3) Press 'print_invoice' button
7) Attachment: video
8) Actual_result: nothing happens when button is pressed
9) Expected_result: invoice_printed
10) Priority: critical
11) Assignee: Andrey
12) Reporter: Andrey

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.

--- Нажать кнопку Commit changes.

 18. Синхронизировать внешний и локальный репозиторий TXT 

=== git pull