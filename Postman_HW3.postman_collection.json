{
	"info": {
		"_postman_id": "c9414388-71f1-44ce-8cf3-908800ef91e3",
		"name": "Postman_HW3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token;\r",
							"console.log(\"Received token = \" + resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Garret",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwerty1!",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respJson = pm.response.json();\r",
							"let reqJson = JSON.parse(request.data);\r",
							"\r",
							"// JSON-cхема ответа\r",
							"const schemaJson = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\":{\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"u_name\":{\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"number\"\r",
							"                        },\r",
							"                        {\r",
							"                            \"type\": \"integer\"\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"            },\r",
							"            \"required\": [\r",
							"                    \"u_age\",\r",
							"                    \"u_name\",\r",
							"                    \"u_salary_1_5_year\"\r",
							"                ],\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(\"Validate schema variant 1\", function() {\r",
							"    pm.response.to.have.jsonSchema(schemaJson)\r",
							"});\r",
							"// 2.1) проверка с использованием TV4\r",
							"pm.test(`${request.name} - schema is valid`, function () {\r",
							"    // validate - выходит из проверки при первом нессоответствии, validateMultiple - проверит до конца\r",
							"    const result = tv4.validateMultiple(respJson, schemaJson);\r",
							"    // Если схема невалидна, выводим ошибки\r",
							"    if(!result.valid) result.errors.forEach(error => \r",
							"    console.log(`Validation error: (${error.message}. Path: ${error.schemaPath}`));\r",
							"  \r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"// 3.1) проверяем правильность коэффициентов \r",
							"pm.test(\"Check KF start salary\", function() {\r",
							"    let kf_start_salary = respJson.start_qa_salary / reqJson.salary;\r",
							"    pm.expect(kf_start_salary).to.deep.eql(1)\r",
							"});\r",
							"\r",
							"pm.test(\"Check KF salary after 6 mths\", function() {\r",
							"    let kf_salary_6_mths = respJson.qa_salary_after_6_months / reqJson.salary;\r",
							"    pm.expect(kf_salary_6_mths).to.deep.eql(2)\r",
							"});\r",
							"\r",
							"pm.test(\"Check KF salary after 12 mths\", function() {\r",
							"    let kf_salary_12_mths = respJson.qa_salary_after_12_months / reqJson.salary;\r",
							"    pm.expect(kf_salary_12_mths).to.deep.eql(2.9)\r",
							"});\r",
							"\r",
							"pm.test(\"Check KF salary after 18 mths\", function() {\r",
							"    let kf_salary_18_mths = respJson.person.u_salary_1_5_year / reqJson.salary;\r",
							"    pm.expect(kf_salary_18_mths).to.deep.eql(4)\r",
							"});\r",
							"\r",
							"// 3.2) проверяем правильность перемножения на коэффициенты\r",
							"\r",
							"pm.test(\"Multi by 1 is correct\", function() {\r",
							"    pm.expect(respJson.start_qa_salary).to.deep.eql(reqJson.salary*1)\r",
							"});\r",
							"\r",
							"pm.test(\"Multi by 2 is correct\", function() {\r",
							"    pm.expect(respJson.qa_salary_after_6_months).to.deep.eql(reqJson.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"Multi by 2.9 is correct\", function() {\r",
							"    pm.expect(respJson.qa_salary_after_12_months).to.deep.eql(reqJson.salary*2.9)\r",
							"});\r",
							"\r",
							"pm.test(\"Multi by 4 is correct\", function() {\r",
							"    pm.expect(respJson.person.u_salary_1_5_year).to.deep.eql(reqJson.salary*4)\r",
							"});\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"var colVar;\r",
							"let salary_1_5_year = respJson.person.u_salary_1_5_year;\r",
							"pm.collectionVariables.set(\"colVar\", salary_1_5_year);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\":35,\r\n    \"name\":\"Garret\",\r\n    \"salary\":1000,\r\n    \"auth_token\":\"/s34lfgbj/Garret/jjd909/38623kjkWpqc2635qwerty1!196887evny\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let reqJson = request.data;\r",
							"let respJson = pm.response.json();\r",
							"\r",
							"const schema_new_data = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\":{\r",
							"        \"age\":{\r",
							"            \"type\":\"number\"\r",
							"        },\r",
							"        \"name\":{\r",
							"            \"type\":\"string\"\r",
							"        },\r",
							"        \"salary\":{\r",
							"            \"type\":\"array\",\r",
							"            \"items\":[\r",
							"                {\r",
							"                    \"type\":\"number\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\":\"string\"\r",
							"                },\r",
							"                {\r",
							"                    \"type\":\"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\":[\r",
							"            \"age\",\r",
							"            \"name\",\r",
							"            \"salary\"\r",
							"    ]\r",
							"}\r",
							"// 1) Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(\"Validate schema variant 1\", function() {\r",
							"    pm.response.to.have.jsonSchema(schema_new_data)\r",
							"});\r",
							"// 2.1) проверка с использованием TV4\r",
							"pm.test(`${request.name} - schema is valid`, function () {\r",
							"    // validate - выходит из проверки при первом нессоответствии, validateMultiple - проверит до конца\r",
							"    const result = tv4.validateMultiple(respJson, schema_new_data);\r",
							"    // Если схема невалидна, выводим ошибки\r",
							"    if(!result.valid) result.errors.forEach(error => \r",
							"    console.log(`Validation error: (${error.message}. Path: ${error.schemaPath}`));\r",
							"  \r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"// 3.1) Проверка правильности коэффициентов\r",
							"\r",
							"pm.test(\"Check KF response salary[0] to be 1\", () =>  {\r",
							"    let KF_salary_0 = respJson.salary[0] / reqJson.salary;\r",
							"    pm.expect(KF_salary_0).to.deep.eql(1)\r",
							"});\r",
							"\r",
							"pm.test(\"Check KF response salary[1] to be 2\", () => {\r",
							"    let KF_salary_1 = respJson.salary[1] / reqJson.salary;\r",
							"    pm.expect(KF_salary_1).to.deep.eql(2)\r",
							"});\r",
							"\r",
							"pm.test(\"Check KF response salary[2] to be 3\", () => {\r",
							"    let KF_salary_2 = respJson.salary[2] / reqJson.salary;\r",
							"    pm.expect(KF_salary_2).to.deep.eql(3)\r",
							"});\r",
							"\r",
							"// 3.2) Проверка правильности перемножения\r",
							"\r",
							"pm.test(\"response salary[0] = request salary * 1\", () => {\r",
							"    pm.expect(respJson.salary[0]).to.deep.eql(reqJson.salary*1)\r",
							"});\r",
							"\r",
							"pm.test(\"response salary[1] = request salary * 2\", () => {\r",
							"    pm.expect(+respJson.salary[1]).to.deep.eql(reqJson.salary*2)\r",
							"});\r",
							"\r",
							"pm.test(\"response salary[2] = request salary * 3\", () => {\r",
							"    pm.expect(+respJson.salary[2]).to.deep.eql(reqJson.salary*3)\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"respJson.salary[2] > respJson.salary[1]\", () => {\r",
							"    pm.expect(+respJson.salary[1]).to.be.lessThan(+respJson.salary[2])\r",
							"});\r",
							"\r",
							"pm.test(\"respJson.salary[2] > respJson.salary[0]\", () => {\r",
							"    pm.expect(+respJson.salary[2]).to.be.greaterThan(respJson.salary[0])\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respJson = pm.response.json();\r",
							"let reqJson = request.data;\r",
							"\r",
							"const schema_test_pet_info = {\r",
							"    \"type\":\"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\":\"number\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\":\"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\":\"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\":[\r",
							"            \"age\",\r",
							"            \"daily_food\",\r",
							"            \"daily_sleep\",\r",
							"            \"name\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(\"Schema validaiton v.1\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema_test_pet_info)\r",
							"});\r",
							"\r",
							"pm.test(`${request.name} - Schema is validated`, () => {\r",
							"    const result = tv4.validateMultiple(respJson, schema_test_pet_info);\r",
							"    if(!result.valid) result.errors.forEach (error =>\r",
							"    console.log(`Validation error ${error.message}. Path: ${error.schemaPath}`));\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"daily_food = weight * 0.012\", () => {\r",
							"    pm.expect(respJson.daily_food).to.be.eql(reqJson.weight*0.012)\r",
							"});\r",
							"\r",
							"pm.test(\"daily_sleep = weight * 2.5\", () => {\r",
							"    pm.expect(respJson.daily_sleep).to.eql(reqJson.weight*2.5)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "4",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "12",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tuzik",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let reqJson = request.data;\r",
							"let respJson = pm.response.json();\r",
							"\r",
							"const schema_test_user = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\":{\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                            \"type\": \"array\",\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"number\"\r",
							"                                }\r",
							"                            ],\r",
							"                            \"type\": \"array\",\r",
							"                            \"items\": [\r",
							"                                {\r",
							"                                    \"type\": \"string\"\r",
							"                                },\r",
							"                                {\r",
							"                                    \"type\": \"number\"\r",
							"                                }\r",
							"                            ]                \r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"children\",\r",
							"                \"u_salary_1_5_year\"\r",
							"            ]\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"number\"\r",
							"        }\r",
							"    },\r",
							"    \"reqired\": [\r",
							"            \"age\",\r",
							"            \"family\",\r",
							"            \"name\",\r",
							"            \"salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(`${request.name} - schema is valid v.1`, () => {\r",
							"    pm.response.to.have.jsonSchema(schema_test_user)\r",
							"});\r",
							"\r",
							"pm.test(`${request.name} - schema is valid v.2`, () => {\r",
							"    const result = tv4.validateMultiple(respJson, schema_test_user);\r",
							"    if(!result.valid) result.errors.forEach(error => \r",
							"    console.log(`Validation error - ${error.message}. Path ${error.schemaPath}`));\r",
							"\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.test(\"name field value = name from environment\", () => {\r",
							"    let env_name = pm.environment.get(\"name\");\r",
							"    pm.expect(respJson.name).to.deep.equal(env_name)\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"pm.test(\"age value response = age value request\", () => {\r",
							"    let env_age = pm.environment.get(\"age\");\r",
							"    pm.expect(+respJson.age).to.equal(env_age);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{colVar}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respJson = pm.response.json();\r",
							"let responseArrayLength = respJson.length;\r",
							"\r",
							"function getRandomInt(min, max) {\r",
							"    return min + Math.floor(Math.random() * (max - min + 1));\r",
							"}\r",
							"\r",
							"let rndID = getRandomInt(0, responseArrayLength);\r",
							"let rndCurrency = respJson[rndID];\r",
							"let rndCurId = rndCurrency.Cur_ID;\r",
							"console.log(rndCurId)\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", parseInt(rndCurId));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let respJson = pm.response.json();\r",
							"console.log(respJson)\r",
							"const schemaCurrByn = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"pm.test(`${request.name} - schema is valid v.1`, () => {\r",
							"    pm.response.to.have.jsonSchema(schemaCurrByn)\r",
							"});\r",
							"\r",
							"pm.test(`${request.name} - schema is valid v.2`, () => {\r",
							"    let result = tv4.validateMultiple(respJson, schemaCurrByn);\r",
							"    if(!result.valid) result.errors.forEach(error => \r",
							"    console.log(`Validation Errors: ${error.message}. Path: ${error.schemaPath}`));\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonDataResponse = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"for(let i = 0; i < jsonDataResponse.length; i++) {\r",
							"    pm.sendRequest({\r",
							"        url: \"http://162.55.220.72:5005/curr_byn\",\r",
							"        method: \"POST\",\r",
							"        header: {\r",
							"            \"Content-Type\": \"multipart/form-data\"\r",
							"            },\r",
							"        body: {\r",
							"            mode: \"formdata\",\r",
							"            formdata: [\r",
							"                {key:\"auth_token\", \r",
							"                value: pm.environment.get(\"token\"), \r",
							"                disabled: \"false\"},\r",
							"                \r",
							"                {key: \"curr_code\", \r",
							"                value: jsonDataResponse[i].Cur_ID, \r",
							"                disabled: \"false\"}     \r",
							"            ]\r",
							"        }\r",
							"    }, function(err, response) {\r",
							"if(response.code == 200) {\r",
							"\r",
							"    console.log('\\n' + 'Cur_Abbreviation = ' + response.json().Cur_Abbreviation + '\\n' + 'Cur_ID = ' + response.json().Cur_ID + '\\n' + 'Cur_Name = ' + response.json().Cur_Name + '\\n' + 'Cur_OfficialRate = ' + response.json().Cur_OfficialRate + '\\n' + 'Cur_Scale = ' + response.json().Cur_Scale + 'n' + 'Date = ' + response.json().Date)}\r",
							"else {console.log('Валюта ' + jsonDataResponse[i].Cur_Name + ', которая имеет Cur_ID = ' + jsonDataResponse[i].Cur_ID + ' не найдена' + '\\n' + 'Переходим к следующему запросу');\r",
							"    return; }\r",
							"    })\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "colVar",
			"value": ""
		},
		{
			"key": "CurID",
			"value": ""
		}
	]
}